openapi: 3.0.0
info:
  title: eCommerce API
  version: 1.0.0
  description: API documentation for the eCommerce application built with Laravel.

servers:
  - url: http://localhost:8000/api
    description: Local development server

paths:
  /register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: StrongP@ssw0rd
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request (validation errors)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /login:
    post:
      summary: Authenticate user and return token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: StrongP@ssw0rd
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized (invalid credentials)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logout:
    post:
      summary: Logout the authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /refresh:
    post:
      summary: Refresh the authentication token
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /products:
    get:
      summary: Get a list of products
      description: Retrieve a list of available products.
      tags:
        - Products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      description: Create a new product (Admin only).
      tags:
        - Products
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      summary: Get product details
      description: Retrieve the details of a specific product by its ID.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the product
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      summary: Update an existing product
      description: Update the details of an existing product (Admin only).
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized

    delete:
      summary: Delete a product
      description: Delete a product by its ID (Admin only).
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the product
      responses:
        '204':
          description: Product deleted
        '401':
          description: Unauthorized
  /cart/items:
    get:
      summary: Get items in the cart
      description: Retrieve all items in the authenticated user's cart.
      tags:
        - Cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of items in the cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '401':
          description: Unauthorized

    post:
      summary: Update cart items
      description: Add an item to the cart or update its quantity. If the quantity is reduced to zero, the item will be removed from the cart.
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddItemToCartRequest'
      responses:
        '201':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '200':
          description: Item quantity in cart has been decreased
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '204':
          description: Item removed from cart (quantity reduced to zero)
        '400':
          description: Invalid input or operation
        '401':
          description: Unauthorized
  /orders:
    post:
      summary: Create a new order
      description: Create a new order by checking out the user's cart.
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request or cart is empty
        '401':
          description: Unauthorized

    get:
      summary: List all orders
      description: Retrieve a paginated list of all orders (Admin only).
      tags:
        - Orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (if the user is not an admin)

  /orders/{orderId}:
    get:
      summary: Get a specific order
      description: Retrieve the details of a specific order by its ID. Accessible only to the owner of the order or an admin.
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to view this order.
        '404':
          description: Order not found

    patch:
      summary: Update an order
      description: Update the status of a specific order (Admin only).
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (if the user is not an admin)
        '404':
          description: Order not found

  /user/orders:
    get:
      summary: Get orders for the authenticated user
      description: Retrieve a paginated list of orders for the authenticated user.
      tags:
        - Orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of user's orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: johndoe@example.com
        email_verified_at:
          type: string
          format: date-time
          example: 2023-08-15T12:34:56Z
        created_at:
          type: string
          format: date-time
          example: 2023-08-15T12:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2023-08-15T12:30:00Z

    AuthResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Login Successfully
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            authorization:
              type: object
              properties:
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                type:
                  type: string
                  example: bearer

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Successfully logged out

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: User unauthorized
          
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        quantity:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CartItem:
      type: object
      properties:
        id:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AddItemToCartRequest:
      type: object
      properties:
        product_id:
          type: integer
          description: The ID of the product to add or update in the cart
        quantity_change:
          type: integer
          description: The quantity change for the product (positive to add, negative to remove)
      required:
        - product_id
        - quantity_change
      
    Order:
      type: object
      properties:
        id:
          type: integer
        order_item:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        user:
          $ref: '#/components/schemas/User'
        status:
          type: string
        total:
          type: string
          description: The total price of the order formatted with a currency symbol
        address:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    StoreOrderRequest:
      type: object
      properties:
        address:
          type: string
          description: Shipping address for the order
      required:
        - address

    UpdateOrderRequest:
      type: object
      properties:
        status:
          type: string
          description: New status for the order (e.g., "Completed", "Cancelled")
      required:
        - status

    OrderItem:
      type: object
      properties:
        id:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
        price:
          type: number
          format: float